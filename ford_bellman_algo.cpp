#include <cstdio>#include <vector>using namespace std;const int MAXN = 1000;const int INF = 1000 * 1000 * 1000;struct TEdge {	int x, y, cost;	TEdge(int a = 0, int b = 0, int c = 0)		: x(a)		, y(b)		, cost(c)	{	}};int n, m;TEdge edges[MAXN];int cnt;int d[MAXN];int p[MAXN];void AddEdge(int x, int y, int cost) {	edges[cnt++] = TEdge(x, y, cost);	edges[cnt++] = TEdge(y, x, cost);}void In() {	cnt = 0;	scanf("%d%d", &n, &m);	for (int i = 0; i < n; ++i) {		int x, y, cost;		scanf("%d%d%d", &x, &y, &cost);		--x;		--y;		AddEdge(x, y, cost);	}}void Solve() {	for (int i = 0; i < n; ++i) {		d[i] = INF;		p[i] = -1;	}	d[0] = 0;	for (int i = 0; i < n; ++i) {		bool relax = false;		for (int j = 0; j < cnt; ++j) {			int x = edges[j].x;			int y = edges[j].y;			int cost = edges[j].cost;			if (d[x] < INF && d[y] > d[x] + cost) {				d[y] = d[x] + cost;				p[y] = x;				relax = true;			}		}		if (!relax) {			break;		}	}	for (int i = 0; i < n; ++i) {		if (d[i] < INF) {			printf("%d to vertex #%d: ", d[i], i + 1);			vector<int> path;			int last = i;			while (last != -1) {				path.push_back(last);				last = p[last];			}			for (size_t i = 0; i < path.size(); ++i) {				printf("%d ", path[path.size() - 1 - i] + 1);			}			printf("\n");		} else {			printf("Path to vertex #%d doesn't exist\n", i + 1);		}	}}int main() {	/*	input:			output:	11 12			0 to vertex #1: 1 	1 2 20			17 to vertex #2: 1 9 2 	1 9 14			16 to vertex #3: 1 9 3 	9 2 3			25 to vertex #4: 1 9 2 11 4 	4 5 15			40 to vertex #5: 1 9 2 11 4 5 	11 4 7			1016 to vertex #6: 1 9 3 6 	6 3 1000		18 to vertex #7: 1 9 3 7 	11 2 1			19 to vertex #8: 1 9 8 	11 3 2			14 to vertex #9: 1 9 	3 9 2			Path to vertex #10 doesn't exist	9 8 5			18 to vertex #11: 1 9 2 11 	3 7 2	8 7 2	*/	freopen("in.txt", "r", stdin);	freopen("out.txt", "w", stdout);	In();	Solve();	return 0;}